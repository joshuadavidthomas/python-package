set dotenv-load := true

@_default:
    just --list

##################
#  DEPENDENCIES  #
##################

bootstrap:
    python -m pip install --editable '.[dev]'

pup:
    python -m pip install --upgrade pip

update:
    @just pup
    @just bootstrap

venv PY_VERSION="{cookiecutter.python_min_version}":
    #!/usr/bin/env python
    from __future__ import annotations

    import subprocess
    from pathlib import Path

    PY_VERSION = (
        subprocess.run(
            {% raw %}["pyenv", "latest", "{{ PY_VERSION }}"], capture_output=True, check=True{% endraw %}
        )
        .stdout.decode()
        .strip()
    )
    name = f"tsacls-{PY_VERSION}"

    home = Path.home()

    pyenv_version_dir = home / ".pyenv" / "versions" / PY_VERSION
    pyenv_virtualenv_dir = home / ".pyenv" / "versions" / name

    if not pyenv_version_dir.exists():
        subprocess.run(["pyenv", "install", PY_VERSION], check=True)

    if not pyenv_virtualenv_dir.exists():
        subprocess.run(["pyenv", "virtualenv", PY_VERSION, name], check=True)

    (python_version_file := Path(".python-version")).write_text(name)

##################
#    TESTING     #
##################

test:
    python -m nox --reuse-existing-virtualenvs

coverage:
    python -m nox --reuse-existing-virtualenvs --session "coverage"

##################
#     DOCS       #
##################

@docs-install:
    python -m pip install '.[docs]'

@docs-serve:
    #!/usr/bin/env sh
    if [ -f "/.dockerenv" ]; then
        sphinx-autobuild docs docs/_build/html --host "0.0.0.0"
    else
        sphinx-autobuild docs docs/_build/html --host "localhost"
    fi

@docs-build LOCATION="docs/_build/html":
    {% raw %}sphinx-build docs {{ LOCATION }}{% endraw %}

##################
#     UTILS      #
##################

lint:
    python -m nox --reuse-existing-virtualenvs --session "lint"

mypy:
    python -m nox --reuse-existing-virtualenvs --session "mypy"
